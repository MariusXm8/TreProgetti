/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package srl.anagrafica.demo.openapi.api;

import srl.anagrafica.demo.openapi.model.ProgettoDTO;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-14T17:27:51.223137400+01:00[Europe/Paris]")
@Validated
@Api(value = "associa", description = "the associa API")
public interface AssociaApi {

    default AssociaApiDelegate getDelegate() {
        return new AssociaApiDelegate() {};
    }

    /**
     * PUT /associa/{id}/{id2} : Modifica un progetto
     * Modifica un progetto ricevendo un id
     *
     * @param id ID del progetto (required)
     * @param id2 ID del Lavoratore (required)
     * @param progettoDTO Aggiorna il progetto (required)
     * @return Modifica riuscita (status code 200)
     *         or Progetto not found (status code 401)
     */
    @ApiOperation(value = "Modifica un progetto", nickname = "associaProgettoLavoratore", notes = "Modifica un progetto ricevendo un id", response = ProgettoDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Modifica riuscita", response = ProgettoDTO.class),
        @ApiResponse(code = 401, message = "Progetto not found") })
    @PutMapping(
        value = "/associa/{id}/{id2}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProgettoDTO> associaProgettoLavoratore(@ApiParam(value = "ID del progetto",required=true) @PathVariable("id") Long id,@ApiParam(value = "ID del Lavoratore",required=true) @PathVariable("id2") Long id2,@ApiParam(value = "Aggiorna il progetto" ,required=true )  @Valid @RequestBody ProgettoDTO progettoDTO) {
        return getDelegate().associaProgettoLavoratore(id, id2, progettoDTO);
    }


    /**
     * DELETE /associa/{id}/{id2} : Modifica un progetto
     * Modifica un progetto ricevendo un id
     *
     * @param id ID del progetto (required)
     * @param id2 ID del Lavoratore (required)
     * @return Rimozione riuscita (status code 200)
     *         or Progetto not found (status code 401)
     */
    @ApiOperation(value = "Modifica un progetto", nickname = "rimoviProgettoLavoratore", notes = "Modifica un progetto ricevendo un id", response = ProgettoDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Rimozione riuscita", response = ProgettoDTO.class),
        @ApiResponse(code = 401, message = "Progetto not found") })
    @DeleteMapping(
        value = "/associa/{id}/{id2}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProgettoDTO> rimoviProgettoLavoratore(@ApiParam(value = "ID del progetto",required=true) @PathVariable("id") Long id,@ApiParam(value = "ID del Lavoratore",required=true) @PathVariable("id2") Long id2) {
        return getDelegate().rimoviProgettoLavoratore(id, id2);
    }

}
